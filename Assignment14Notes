Httpsession
    -> unique to ONE user, hence the storage confusion
    -> still save to the collection
    -> data stored in a session is unique to that user
        - like username
        -

@RequestBody annotation
    -> Spring MVC annotation
    -> the front-end sends JSON data via username via the prompt
    -> this annotation instructs it to convert the JSON data into a User object
    -> Spring automatically maps it assuming the User class has a field "username"
    -> TURNS JSON INTO JAVA OBJECT (whether using 'payload' or object like User)
    -> used for RECEIVING data from the client
    -> transforms the HTTP request body into a method parameter
    -> JSON -> Object


Storage
    -> HTTPSession
        - storage on server side for the user's entire session
        - one user per session
        - ideal for this project
    -> Java Storage
        - uses databases to store after session has ended
        - in this case, just using collections
    -> Session Storage
        - browser's storage
        - client side, unlike Httpsession (server side)
        - stored for entirety of session (even closing and re-opening)

ResponseBody
    -> Spring MVC annotation
    -> controller method annotation that returns a JSON response (often needed to work properly)
    -> Indicates that the return value of a method should be used as the response body of the HTTP response.
    -> Typical Scenario: When you want to return data directly (e.g., JSON, XML) from a controller method without using a view template.
    -> Object -> JSON
    -> used for SENDING data back to the client
    -> transforms the return value of the method into the HTTP response body


