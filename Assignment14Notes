Httpsession
    -> unique to ONE user, hence the storage confusion
    -> still save to the collection
    -> data stored in a session is unique to that user
        - like username
        -

@RequestBody annotation
    -> the front-end sends JSON data via username via the prompt
    -> this annotation instructs it to convert the JSON data into a User object
    -> Spring automatically maps it assuming the User class has a field "username"


Storage
    -> HTTPSession
        - storage on server side for the user's entire session
    -> Java Storage
        - uses databases to store after session has ended
        - in this case, just using collections
    -> Session Storage
        - browser's storage
        - client side, unlike Httpsession (server side)
